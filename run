#!/bin/bash

# check if input is install
if [ "$1" = "install" ]; then
    # install dependencies
    DEPENDENCIESINSTALLED=8
    TSERR=$(npm install typescript 2>&1 > '/dev/null')
    TSNODEERR=$(npm install typescript ts-node 2>&1 > '/dev/null')
    AXIOSERR=$(npm install axios 2>&1 > '/dev/null')
    WINSTONERR=$(npm install winston 2>&1 > '/dev/null')
    DOTENVERR=$(npm install dotenv 2>&1 > '/dev/null')
    NDJSONERR=$(npm install --save @types/ndjson 2>&1 > '/dev/null')
    JESTERR=$(npm install --save-dev jest 2>&1 > '/dev/null')
    ISOERR=$(npm install isomorphic-git 2>&1 > '/dev/null')
    # check for successful installs
    if [[ $TSERROR != '' ]]; then
        echo 'Error installing typescript'
        let "DEPENDENCIESINSTALLED -= 1"
    elif [[ $TSNODEERR != '' ]]; then
        echo 'Error installing typescript ts-node'
        let "DEPENDENCIESINSTALLED -= 1"
    elif [[ $AXIOSERR != '' ]]; then
        echo 'Error installing axios'
        let "DEPENDENCIESINSTALLED -= 1"
    elif [[ $WINSTONERR != '' ]]; then
        echo 'Error installing winston'
        let "DEPENDENCIESINSTALLED -= 1"
    elif [[ $DOTENVERR != '' ]]; then
        echo 'Error installing dotenv'
        let "DEPENDENCIESINSTALLED -= 1"
    elif [[ $NDJSONERR != '' ]]; then
        echo 'Error installing ndjson type'
        let "DEPENDENCIESINSTALLED -= 1"
    elif [[ $JESTERR != '' ]]; then
        echo 'Error installing jest'
        let "DEPENDENCIESINSTALLED -= 1"
    elif [[ $ISOERR != '' ]]; then
        echo 'Error installing isomorphic-git'
        let "DEPENDENCIESINSTALLED -= 1"
    else
        echo $DEPENDENCIESINSTALLED dependencies successfully installed
        exit 0
    fi
    if [[ $DEPDENCIESINSTALLED < 8 ]]; then
        echo $DEPENDENCIESINSTALLED dependencies successfully installed
        exit 1
    fi

# check if input is a file
elif [ -f "$1" ]
then
    TSC=$(tsc main.ts 2>&1 > '/dev/null');
    if [[ "${TSC}" != '' ]]; then
        echo "Files failed to compile"
        exit 1
    else
        if [[ "${LOG_FILE}" == '' ]]; then
            echo "LOG_FILE not set"
            exit 1
        elif [[ "${GITHUB_TOKEN}" == '' ]]; then
            echo "GITHUB_TOKEN not set"
            exit 1
        else
            node main.js $1
            exit $?
        fi
    fi

# check if input is test
elif [ "$1" = "test" ]
then
    # make sure files are compiled
    COMPILE=$(tsc main.ts 2>&1 > '/dev/null')
    # run test suite for coverage and number of tests passed 
    TEST1=$(npx jest --collectCoverage --coverageReporters="json-summary" 2>&1 > '/dev/null')
    TEST2=$(npx jest --json >> tests.json 2> '/dev/null')

    # generate proper output
    TSCTEST=$(tsc testParse.ts 2>&1 > '/dev/null');
    if [[ "${TSCTEST}" != '' ]]; then
        echo "Files failed to compile"
        exit 1
    else
        TESTPARSE=$(node testParse.js);
        if [[ "${TESTPARSE}" == 'Test suite was not executed' ]]; then
            echo $TESTPARSE
            exit 1
        else
            echo $TESTPARSE
            exit 0
        fi
    fi

# invalid input
else
    echo "Please enter a valid argument: ./run <URL_FILE> ./run test ./run install"
    exit 1
fi